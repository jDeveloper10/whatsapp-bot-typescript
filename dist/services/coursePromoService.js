"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoursePromoService = void 0;
exports.initCoursePromoService = initCoursePromoService;
exports.getCoursePromoService = getCoursePromoService;
const config_1 = require("../config/config");
/**
 * Clase que maneja la promoci√≥n peri√≥dica de los cursos de la comunidad
 */
class CoursePromoService {
    constructor(client) {
        this.courseList = [];
        this.timer = null;
        this.interval = 3600000; // 1 hora por defecto
        this.targetGroups = [];
        this.client = client;
        this.initializeCourses();
        // Por defecto, promocionar en grupos configurados en config
        if (config_1.config.promoGroups && Array.isArray(config_1.config.promoGroups)) {
            this.targetGroups = config_1.config.promoGroups;
        }
    }
    /**
     * Inicializa la lista de cursos disponibles
     */
    initializeCourses() {
        this.courseList = [
            {
                name: "Desarrollo de Videojuegos con Godot",
                description: "Aprende a crear tus propios videojuegos 2D y 3D utilizando el motor Godot Engine",
                emoji: "üéÆ",
                benefits: [
                    "Desarrollo de juegos multiplataforma",
                    "Programaci√≥n con GDScript",
                    "F√≠sica para videojuegos",
                    "Publicaci√≥n en tiendas digitales"
                ],
                callToAction: "¬°√önete y crea el juego que siempre so√±aste!"
            },
            {
                name: "JavaScript Avanzado",
                description: "Domina JavaScript moderno y convi√©rtete en un desarrollador frontend de alto nivel",
                emoji: "üåê",
                benefits: [
                    "ES6+ y nuevas caracter√≠sticas",
                    "Frameworks modernos",
                    "Patrones de dise√±o",
                    "Optimizaci√≥n de rendimiento"
                ],
                callToAction: "¬°Potencia tus habilidades web y destaca en el mercado!"
            },
            {
                name: "Ingenier√≠a de Software",
                description: "Metodolog√≠as y pr√°cticas profesionales para desarrollo de software de calidad",
                emoji: "üîß",
                benefits: [
                    "Metodolog√≠as √°giles",
                    "Arquitectura de software",
                    "Testing y QA",
                    "Gesti√≥n de proyectos"
                ],
                callToAction: "¬°Construye software robusto y escalable!"
            },
            {
                name: "Firebase",
                description: "Crea aplicaciones con backend r√°pido utilizando Firebase de Google",
                emoji: "üî•",
                benefits: [
                    "Firestore y Realtime Database",
                    "Autenticaci√≥n y seguridad",
                    "Cloud Functions",
                    "Hosting y almacenamiento"
                ],
                callToAction: "¬°Desarrolla apps completas sin preocuparte del backend!"
            },
            {
                name: "Matem√°ticas para Programadores",
                description: "Fundamentos matem√°ticos esenciales para destacar en desarrollo de software",
                emoji: "üßÆ",
                benefits: [
                    "√Ålgebra lineal",
                    "Algoritmos y optimizaci√≥n",
                    "Estad√≠stica para datos",
                    "Matem√°tica discreta"
                ],
                callToAction: "¬°Potencia tu l√≥gica y resuelve problemas complejos!"
            },
            {
                name: "Bases de Datos",
                description: "Dise√±o e implementaci√≥n de bases de datos SQL y NoSQL",
                emoji: "üíæ",
                benefits: [
                    "Modelado de datos",
                    "Consultas avanzadas SQL",
                    "MongoDB y bases NoSQL",
                    "Optimizaci√≥n y rendimiento"
                ],
                callToAction: "¬°Gestiona datos de forma eficiente y escalable!"
            },
            {
                name: "Java Enterprise",
                description: "Desarrollo de aplicaciones empresariales con Java y Spring Boot",
                emoji: "‚òï",
                benefits: [
                    "Spring Framework",
                    "APIs RESTful",
                    "Microservicios",
                    "Seguridad y autenticaci√≥n"
                ],
                callToAction: "¬°Convi√©rtete en desarrollador Java empresarial!"
            }
        ];
    }
    /**
     * Establece los grupos donde se promocionar√°n los cursos
     */
    setTargetGroups(groupIds) {
        this.targetGroups = groupIds;
    }
    /**
     * Establece el intervalo de tiempo entre promociones
     */
    setInterval(milliseconds) {
        if (milliseconds < 1800000) { // M√≠nimo 30 minutos
            milliseconds = 1800000;
        }
        this.interval = milliseconds;
        // Reiniciar el timer si ya estaba activo
        if (this.timer) {
            this.stopPromotions();
            this.startPromotions();
        }
    }
    /**
     * Inicia las promociones autom√°ticas
     */
    startPromotions() {
        if (this.timer) {
            return; // Ya est√° iniciado
        }
        // Promocionar inmediatamente al iniciar
        this.promoteCourse();
        // Configurar timer para promociones peri√≥dicas
        this.timer = setInterval(() => {
            this.promoteCourse();
        }, this.interval);
        console.log(`Promoci√≥n de cursos iniciada. Intervalo: ${this.interval / 60000} minutos`);
    }
    /**
     * Detiene las promociones autom√°ticas
     */
    stopPromotions() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
            console.log('Promoci√≥n de cursos detenida');
        }
    }
    /**
     * Promociona un curso aleatorio en los grupos objetivo
     */
    promoteCourse() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.targetGroups.length === 0) {
                    console.log('No hay grupos configurados para promociones');
                    return;
                }
                // Seleccionar un curso aleatorio
                const randomCourse = this.courseList[Math.floor(Math.random() * this.courseList.length)];
                const message = this.createPromoMessage(randomCourse);
                // Enviar a cada grupo objetivo
                for (const groupId of this.targetGroups) {
                    try {
                        yield this.client.sendMessage(groupId, message);
                        console.log(`Promoci√≥n de "${randomCourse.name}" enviada al grupo ${groupId}`);
                    }
                    catch (err) {
                        console.error(`Error enviando promoci√≥n al grupo ${groupId}:`, err);
                    }
                }
            }
            catch (error) {
                console.error('Error en la promoci√≥n de cursos:', error);
            }
        });
    }
    /**
     * Crea un mensaje de promoci√≥n atractivo para un curso
     */
    createPromoMessage(course) {
        const message = `${course.emoji} *CURSO DESTACADO* ${course.emoji}\n\n` +
            `*${course.name}*\n\n` +
            `${course.description}\n\n` +
            `*¬øQu√© aprender√°s?*\n` +
            course.benefits.map(benefit => `‚Ä¢ ${benefit}`).join('\n') +
            `\n\n` +
            `*${course.callToAction}*\n\n` +
            `Para m√°s informaci√≥n sobre este y otros cursos, escribe "@bot cursos" o contacta a un administrador.\n` +
            `\n---------------------\n` +
            `_Comunidad de Programaci√≥n y Tecnolog√≠a_`;
        return message;
    }
    /**
     * Promociona un curso espec√≠fico por su nombre
     */
    promoteSpecificCourse(courseName, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            const course = this.courseList.find(c => c.name.toLowerCase().includes(courseName.toLowerCase()));
            if (!course) {
                return false;
            }
            try {
                const message = this.createPromoMessage(course);
                yield this.client.sendMessage(groupId, message);
                return true;
            }
            catch (error) {
                console.error('Error promocionando curso espec√≠fico:', error);
                return false;
            }
        });
    }
    /**
     * Obtiene la lista de cursos disponibles
     */
    getCourseList() {
        return [...this.courseList];
    }
}
exports.CoursePromoService = CoursePromoService;
// Exportar una instancia singleton
let instance = null;
function initCoursePromoService(client) {
    if (!instance) {
        instance = new CoursePromoService(client);
    }
    return instance;
}
function getCoursePromoService() {
    return instance;
}
exports.default = { initCoursePromoService, getCoursePromoService };
